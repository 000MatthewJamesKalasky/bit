node {
    checkout scm
    tarName = "bit-${VERSION}-brew.tar.gz"
    debpkg="bit_${VERSION}_all.deb"
    rpm="bit-${VERSION}-1.noarch.rpm" 
    msi="bit-${VERSION}-unsigned.msi"
    def uploadfolder = "gs://bit-assets/release/${VERSION}/"
        parallel (
        "deb" : { 
           sh("wget ${env.EXTERNAL_REPO}/bit-deb/development/bit/${VERSION}/${debpkg} ")
           def fullUrl = "${env.EXTERNAL_REPO}/bit-deb/stable/bit/${VERSION}/bit_${VERSION}_all.deb;deb.distribution=all;deb.component=stable;deb.architecture=amd64"
           sh("curl -u${REPO_TOKEN} -T ${debpkg} -XPUT '${fullUrl}'")
        },
        "rpm" : { 
            publishToRepo("bit-yum/development/bit/${VERSION}/${rpm}","bit-yum/stable/bit/${VERSION}/${rpm}")
            },

        "brew" : { 
            publishToRepo("bit-brew/development/bit/${VERSION}/${tarName}","bit-brew/stable/bit/${VERSION}/${tarName}")
            sh("./scripts/generate-formula.sh ${env.EXTERNAL_REPO}/bit-brew/stable/bit/${VERSION}/${tarName}")
            sh("cd ./distribution && gsutil -m cp bit.rb ${uploadfolder}")
         }
    )
}
def publishToRepo(from,to){
    def fullUrl = "${env.EXTERNAL_REPO}/api/copy/${from}?to=${to}"
    sh("curl -u${REPO_TOKEN} -XPOST '${fullUrl}'")
}