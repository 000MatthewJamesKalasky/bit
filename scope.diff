diff --git a/src/environment/capsule-builder.ts b/src/environment/capsule-builder.ts
index 407677283..bdd5e11d4 100644
--- a/src/environment/capsule-builder.ts
+++ b/src/environment/capsule-builder.ts
@@ -21,6 +21,7 @@ import { loadConsumerIfExist } from '../consumer';
 import CapsulePaths from './capsule-paths';
 import { SuppoertedPackageMannagers as SupportedPackageManagers } from '../extensions/capsule/orchestrator/types/capsule-options';
 import CapsuleList from './capsule-list';
+import componentIdToPackageName from '../utils/bit/component-id-to-package-name';
 
 const librarian = require('librarian');
 
@@ -82,10 +83,11 @@ export default class CapsuleBuilder {
     );
 
     const capsuleList = new CapsuleList(...capsules.map(c => ({ id: c.bitId, value: c })));
-
+    const defaultScope = loadedConsumer ? loadedConsumer.config.defaultScope : '';
+    const bindingPrefix = loadedConsumer ? loadedConsumer.config.bindingPrefix: '';
     await this.isolateComponentsInCapsules(components, graph, this._buildCapsulePaths(capsules), capsuleList);
     if (actualCapsuleOptions.installPackages) {
-      const installation = await this.installpackages(capsules, actualCapsuleOptions.packageManager!);
+      const installation = await this.installpackages(capsules, actualCapsuleOptions.packageManager!, defaultScope, bindingPrefix);
       console.log(installation);
     }
 
@@ -103,9 +105,19 @@ export default class CapsuleBuilder {
     return this.orch.getCapsule(capsuleOptions?.workspace || this.workspace, config, orchOptions);
   }
 
-  async installpackages(capsules: ComponentCapsule[], packageManager: SupportedPackageManagers): Promise<void> {
+  async installpackages(capsules: ComponentCapsule[], packageManager: SupportedPackageManagers, defaultScope?: string, bindingPrefix?: string): Promise<void> {
     // something[packageManager].install(capsules) TODO
     if (packageManager === 'librarian') {
+      capsules.forEach(async capsule => {
+        const packageJsonPath = 'package.json';
+        const pjsonString = capsule.fs.readFileSync(packageJsonPath).toString();
+        const packageJson = JSON.parse(pjsonString);
+        if (!capsule.bitId.hasScope() && defaultScope) {
+          packageJson.name = componentIdToPackageName(capsule.bitId.changeScope(defaultScope), bindingPrefix);
+        }
+        capsule.fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
+      });
+
       const logFn = l => console.log(`[librarian] ${l}`);
       return librarian.runMultipleInstalls(capsules.map(cap => cap.wrkDir));
     }
@@ -115,6 +127,9 @@ export default class CapsuleBuilder {
         const pjsonString = capsule.fs.readFileSync(packageJsonPath).toString();
         const packageJson = JSON.parse(pjsonString);
         const bitBinPath = './node_modules/bit-bin';
+        if (!capsule.bitId.hasScope() && defaultScope) {
+          packageJson.name = componentIdToPackageName(capsule.bitId.changeScope(defaultScope), bindingPrefix);
+        }
         const localBitBinPath = path.join(__dirname, '../..');
         delete packageJson.dependencies['bit-bin'];
         capsule.fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
